/*
    css三大特性：层叠性，继承性，优先级
    基本语法：  选择器{样式1；样式2；..}
        
    一.基础选择器
            权重: !important>内联样式(1000)>id选择器(100)>类选择器(10)>元素选择器(1)>通配符选择器(0)>继承的样式
        1.标签（元素）选择器：用HTML标签作为选择器，把某一类标签全部选择出来
        2.类选择器：样式点定义，结构类(class)调用,一个或多个，开发最常用。
        3.id选择器: 样式#定义，结构id调用，只能调用一次，别人切勿使用(唯一性)。
        4.通配符选择器：样式*定义，选取所有元素
    二.复合选择器(对基础选择器进行组合)
        1.后代选择器,可以选择父元素里面的子元素
        语法：  祖先元素 后代元素{}
        2.子元素选择器，只能选择作为某元素的最近一级子元素
        语法：  父元素>子元素{}
        3.兄弟选择器，可以选出同级的选择器
        语法：  （选择p的下一个兄弟div） p + div {}
                （选择p后面所有兄弟div） p ~ div {}
        4.交集选择器，可以选择同时符合多个条件的元素
        语法：  选择器1选择器2...选择器n{}
        5.并集选择器，可以选择多个选择器对应的元素，同时为它们定义相同的样式
        语法：  选择器1,选择器2,...,选择器n{}
        6.属性选择器 
                [属性名]{}        选择含有指定属性的元素
                [属性名=属性值]   选择含有指定属性和属性值的元素
                [属性名^=属性值]  选择属性值中以指定值开头的元素
                [属性名$=属性值]  选择属性值中以指定值结尾的元素
                [属性名*=属性值]  选择属性值中含有指定值的元素
        7.伪类选择器 ,用于描述元素的特殊状态，一般以：开头
            链接伪类选择器
                a:link 选择所有正常或未被访问的链接
                a:visited 选择所有已被访问的链接（只能改颜色）
                a:hover 选择鼠标指针位于其上的链接
                a:active 选择活动链接(鼠标按下未弹起的链接)
                :focus伪类选择器，用于选择获得焦点(光标)的表单元素
            结构伪类选择器
                E:first-child  E:last-child  E:nth-child(n)  对所有子元素排序
                E:first-of-type E:last-of-type E:nth-of-type(n) 对同类型子元素排序
                    n可以是数字，关键字(even偶数，odd奇数)，公式
        8.伪元素选择器，用于描述元素的特殊位置,一般以::开头
            语法： element::before/after{} 表示元素的开始/结束位置，必须有content属性
            ::first-letter 表示第一个字母  ::first-line 表示第一行  ::selection 表示选中内容
    三.盒子模型
        1.border(边框)
            border-width(边框粗细) 400px,700px
            border-style(边框样式)：solid(实线),dashed(虚线),dotted(点线) 
            border-color(边框颜色)
            边框简写  border: 1px solid red;(没有顺序)
            边框分开写法  border-top: 1px solid red;(只设定上边框，其余同理)
        2.outline(轮廓)：与边框类似，但不影响盒子大小
        3.content(内容)
        4.padding(内边距)
            padding-left(左内边距),padding-right(右内边距),padding-top(上内边距),padding-bottom(下内边距)
            内边距简写  padding：一个值(上下左右) | 两个值(上下，左右) | 三个值(上，左右，下) | 四个值(上，右，下，左)
        5.margin(外边距)
            margin-left,margin-right,margin-top,margin-bottom
            其简写与内边距一致
        6.圆角边框 border-radius: length(数值或百分比);
        7.盒子阴影 box-shadow: h-shadow(水平偏移) v-shadow(垂直偏移) blur(阴影的模糊半径) color
        8.文字阴影 text-shadow: h-shadow v-shadow blur color;
*/

/* 去除默认的内外边距 */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* 去除列表前的样式 */
li {
    list-style: none;
}

header {
    width: 100%;
    height: 60px;
    border-bottom: 1px solid #ebebeb;
}

.logo {
    float: left;
    width: 130px;
    height: 35px;
    margin: 10px 22px 0;
}

header .nav_left li{
    float: left;
    margin: 20px 20px;
}

header a {
    font-size: 16px;
    color: #333;
    text-decoration: none;
    /* 
    text-decoration 设置文本修饰
    可选值：默认(none),下划线(underline)，删除线(line-through)，上划线(overline)
    */
}

header a:hover {
    color: skyblue;
}

.more::before{
    content:"";
    position: absolute;
    top: -60px;
    width: 60px;
    height: 60px;
    border-left: 1px solid #ebebeb;
    border-right: 1px solid #ebebeb;
}

.more {
    position: absolute;
    top: 60px;
    left: 610px;
    width: 410px;
    height: 250px;
    background-color: #fff;
    border: 1px solid #ebebeb;
    display: none;
}
/* 元素的显示与隐藏
    1.display属性：display: none;(隐藏对象)，display: block;(显示元素)
            display隐藏元素后，不再占有原来位置
    2.visibility属性：visibility：visible;(元素可视)，visibility：hidden(元素隐藏)
            visibility隐藏后继续占有原来位置
    3.overflow溢出：属性值visible,hidden,scroll,auto
             */

.more_a {
    float: left;
    width: 60px;
    height: 42.5px;
    margin: 10px 0 10px 20px;
}

header ul li:last-child:hover .more,
.more:hover {
    display: block;
}

header .nav_right input,button {
    float: right;
}

header input {
    margin: 15px 130px 0 0;
    width: 200px;
    height: 34px;
    background-color: rgb(244,244,244);
    border: none;
    border-radius: 5%;
    text-indent: 1em;
}

/* 字体图标声明 */
@font-face {
    font-family: 'icomoon';
    src:  url('../fonts/icomoon.eot?36wczz');
    src:  url('../fonts/icomoon.eot?36wczz#iefix') format('embedded-opentype'),
      url('../fonts/icomoon.ttf?36wczz') format('truetype'),
      url('../fonts/icomoon.woff?36wczz') format('woff'),
      url('../fonts/icomoon.svg?36wczz#icomoon') format('svg');
    font-weight: normal;
    font-style: normal;
    font-display: block;
  }
/* 字体图标使用 */
.btn_search::after {
    font-family: 'icomoon';
    content: '\e986';
    font-size: 16px;
    position: absolute;
    top: 10px;
    right: 6px;
}

.btn_search {
    position: absolute;
    top:15px;
    right: 130px;
    width: 25px;
    height: 34px;
    border: none;
    border-radius: 5%;
    background-color:rgb(244,244,244);
}

.btn_search>a {
    display: block;
    width: 25px;
    height: 34px;
}
.btn_login {
    position: absolute;
    top:17px;
    right: 25px;
    width: 80px;
    height: 30px;
    line-height: 30px;
    text-align: center;
    background: #f7fbfe;
    border: 1px solid #a8d5ff;
    border-radius: 3px;
}

.btn_login>a {
    color: #2291f7;
    font-size:14px;
}

.w {
    width: 1200px;
    margin: 0 auto;
}

h1 {
    font-size: 40px;
    line-height: 1.5;
    margin: 50px 0 25px 0;
    color: #333;
}

.connent {
    overflow: hidden;
}

/*
    float(浮动)，属性none,left,right
    浮动特性：1.脱离标准普通流的控制(浮)，移动到指定位置(动)
             2.浮动的盒子不再保留原来的位置
             3.浮动元素会具有行内块元素特性
             4.浮动元素不会盖住文字，文字会环绕在浮动元素周围
    解决外边距重叠和浮动带来的高度塌陷问题：
        .clearfix::before,
        .clearfix::after {
                content: '';
                display: table;
                clear: both;
                     }
*/

.left {
    float: left;
    width: 125px;
    height: 750px;
    border-right: 1px solid #ebebeb;
    background-image: url(../images/conment.png);
    background-repeat: no-repeat;
    background-attachment: scroll;
}
/* 
    background-image  设置背景图像
    可选值： url(图片路径)

    background-repeat  设置背景平铺
    可选值：repeat(默认), no-repeat, repeat-x, repeat-y   

    backgroud-position  设置背景图片位置
    可选值：top, center, bottom, left, right，px     

    backgroud-attachment  设置背景图像是否跟随元素移动
    可选值：scroll(滚动), fixed(固定)  

    background-clip  设置背景范围
    可选值：border-box 默认值，背景会出现再边框的下边
            padding-box 背景不会出现再边框，只出现在内容区和内边距
            content-box  背景只出现在内容区

    background-origin  设置背景图片的偏移量计算的原点
    可选值：padding-box 默认值，backgroud-position从内边距处开始计算
             border-box  背景图片的偏移量从边框处开始计算
             content-box  背景图片的偏移量从内容区开始计算

    background-size  设置背景图片的大小
    可选值：px(宽) px(高)
            cover 图片比例不变，将元素铺满
            contain 图片比例不变，将图片在元素中完整显示
                        
    background  背景相关的简写属性
            */

.right {
    float: left;
    margin-left: 40px;
    width: 770px;
    height: 750px;
}

.right img {
    width: 499px;
    height: 333px;
    margin: 10px 0;
    /* vertical-align设置元素垂直对齐的方式，middle 即使图片与文字垂直居中对齐 */
    vertical-align: middle;
}

p {
    color: #555;
    font-size: 20px;
    line-height: 2.2;
    text-indent: 2em;
    margin-top: 10px;
}

h2 {
    color: red;
    text-align: center;
    margin: 30px 0;
    /*设置字体*/
    font-family: "Microsoft YaHei";
    /*设置字号*/
    font-size: 30px;
    /*设置字体粗细，400正常，700粗体*/
    font-weight: 700;
    /*设置字体样式，italic斜体,normal正常*/
    font-style: italic;
}


.flex_box {
    /* 设置弹性容器 */
    display: flex;
    /* 设置容器中弹性元素的排列方式，可选值 row,row-reverse,column,column-reverse */
    flex-direction: row;
    /* 设置弹性元素是否再容器中自动换行，可选值 nowrap,wrap,wrap-reverse */
    flex-wrap: nowrap;
    /* 
    justify-content 如何分配主轴上的空白空间（主轴上的元素如何排列）
            可选值： flex-start 元素沿主轴起边排列（空白在右）
                    flex-end  元素沿主轴终边排列（空白在左)
                    center  元素居中排列（空白在两侧）
                    space-around  空白分布到元素两侧
                    space-between  空白均匀分布到元素间
                    space-evenly  空白分布到元素单侧
    */
    justify-content: center;
    /*  
    align-items 元素在辅轴上如何对齐
            可选值：stretch 默认值，将元素的长度设置为相同的值
                    flex-start 元素不会拉伸，沿着辅轴起边对齐
                    flex-end  元素沿着辅轴终边对齐
                    center  元素居中对齐
    */
    align-items: center;
    /* 父元素用相对定位 */
    position: relative;
    width: 900px;
    margin: 0 auto;
     /* 给父盒子设置透视（起3D效果） */
    perspective: 500px;
}

.box1 {
    width: 300px;
    height: 200px;
    transition: all .5s;
     /* 让子盒保持3D效果 */
    transform-style: preserve-3d;
    /* 设置弹性元素的伸展系数 */
    flex-grow: 0;
    /* 设置弹性元素的收缩系数 */
    flex-shrink: 1;
}

.Myblog {
    width: 300px;
    height: 200px;
    text-align: center;
    line-height: 200px;
    background-color: #c35536;
    color: white;
    font-size: 40px;
}

.csdn {
    position: absolute;
    top: 0;
    left: 0;
    width: 300px;
    height: 200px;
    background-color: #fff;
    transform: rotateY(180deg);
    transition: all 1s;
}

/* 使盒子居中 */
.box1 img {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
}
/*
    position(定位)，定位模式+边偏移
    1.定位模式：static(静态定位)，默认定位方式，无定位
               relative(相对定位)，参照原来位置移动，保留原来位置
               absolute(绝对定位)，没有父级元素或父级元素无定位时，参照浏览器；父级元素有定位时，参照最近的有定位的父级元素；不占原来的位置(脱离文档流)，改变元素的性质，行内元素变为块元素；子绝父相
              fixed(固定定位)，参照浏览器可视窗口，不随滚动条滚动，不占原来位置
            2.边偏移：top,bottom,left,right
            3.定位叠放次序：z-index ,数值越大，盒子越靠上
*/

.box1:hover {
    transform: rotateY(180deg);
    /* 3D旋转 绕Y轴旋转180度*/
}

.box2 {
    width: 300px;
    height: 200px;
    text-align: center;
    line-height: 200px;
    background-color: orange;
    font-size: 40px;
    color: white;
    transition: all 1s;
}

.box2:hover {
    transform: rotateX(360deg);
    /* 3D旋转 绕X轴旋转360度*/
}

.box3 {
    position: relative;
    width: 300px;
    height: 200px;
}

.suofang {
    position: absolute;
    top: 0;
    left: 0;
    width: 150px;
    height: 100px;
    font-size: 25px;
    text-align: center;
    line-height: 100px;
    color: white;
    background-color: red;
    transition: all 0.5s;
    /* 属性过渡效果（谁过渡给谁加） */
    transform-origin: left top;
    /* 设置左上角为缩放的中心点 */
    z-index: 2;
}

.suofang:hover {
    transform: scale(2, 2);
    /* 宽，高放大2倍 */
    background-color: orange;
}

.xuanzhuan {
    position: absolute;
    top: 0;
    left: 150px;
    width: 150px;
    height: 100px;
    font-size: 25px;
    text-align: center;
    line-height: 100px;
    background: rgba(0, 0, 0, 0.1);
    /*背景颜色半透明，最后一个参数alpha透明度，范围(0,1)*/
    transform-origin: left bottom;
    /* 设置左下角为选择的中心点 */
    transition: all 0.4s;
}

.xuanzhuan:hover {
    transform: rotate(360deg);
    /* 顺时针旋转360度 */
}

/* 设置css三角 */
.sanjiao {
    position: absolute;
    left: 50px;
    top: 100px;
    z-index: 1;
    width: 0;
    height: 0;
    border: 50px solid transparent;
    border-right-color: pink;
    /* 动画调用 */
    animation-name: move;
    /* 动画持续时间 */
    animation-duration: 5s;
    /* 动画播放速度 */
    animation-timing-function: ease;
    /* 动画播放次数 */
    animation-iteration-count: infinite;
    /* 动画下一周期逆向播放 */
    animation-direction: alternate;
}

.sanjiao:hover {
    /* 动画运行或暂停 */
    animation-play-state: paused;
}

/* 动画序列效果 ，创建动画关键帧*/
@keyframes move {
    0% {
        transform: translate(150px, 0);
    }
    50% {
        transform: translate(-700px, 0)
    }
}

.move {
    position: absolute;
    left: 150px;
    top: 100px;
    width: 150px;
    height: 100px;
    font-size: 25px;
    text-align: center;
    line-height: 100px;
    background-color: skyblue;
    white-space: nowrap;
    /*white-space 设置网页如何处理空白
              可选值：
                    normal 正常
                    nowrap 强制文字一行内显示
                    pre  保留空白
              */
    overflow: hidden;
    /*溢出隐藏*/
    text-overflow: ellipsis;
    /*文字溢出时用省略号显示*/
}

.move:hover {
    transform: translateX(-150px);
    /* 盒子向左移动100px，不影响其他盒子*/
    transition: all 0.6s;
}

.footer {
    height: 50px;
    margin-top: 50px;
    border-top: 2px solid #ebebeb;
    text-align: center;
    line-height: 50px;
    font-size: 18px;
    font-weight: 700;
}